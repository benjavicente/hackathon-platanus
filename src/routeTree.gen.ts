/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LeccionesImport } from './routes/lecciones'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as LeccionesLessonIdImport } from './routes/lecciones.$lessonId'
import { Route as FaqIdImport } from './routes/faq.$id'

// Create/Update Routes

const LeccionesRoute = LeccionesImport.update({
  id: '/lecciones',
  path: '/lecciones',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LeccionesLessonIdRoute = LeccionesLessonIdImport.update({
  id: '/$lessonId',
  path: '/$lessonId',
  getParentRoute: () => LeccionesRoute,
} as any)

const FaqIdRoute = FaqIdImport.update({
  id: '/faq/$id',
  path: '/faq/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/lecciones': {
      id: '/lecciones'
      path: '/lecciones'
      fullPath: '/lecciones'
      preLoaderRoute: typeof LeccionesImport
      parentRoute: typeof rootRoute
    }
    '/faq/$id': {
      id: '/faq/$id'
      path: '/faq/$id'
      fullPath: '/faq/$id'
      preLoaderRoute: typeof FaqIdImport
      parentRoute: typeof rootRoute
    }
    '/lecciones/$lessonId': {
      id: '/lecciones/$lessonId'
      path: '/$lessonId'
      fullPath: '/lecciones/$lessonId'
      preLoaderRoute: typeof LeccionesLessonIdImport
      parentRoute: typeof LeccionesImport
    }
  }
}

// Create and export the route tree

interface LeccionesRouteChildren {
  LeccionesLessonIdRoute: typeof LeccionesLessonIdRoute
}

const LeccionesRouteChildren: LeccionesRouteChildren = {
  LeccionesLessonIdRoute: LeccionesLessonIdRoute,
}

const LeccionesRouteWithChildren = LeccionesRoute._addFileChildren(
  LeccionesRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/lecciones': typeof LeccionesRouteWithChildren
  '/faq/$id': typeof FaqIdRoute
  '/lecciones/$lessonId': typeof LeccionesLessonIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/lecciones': typeof LeccionesRouteWithChildren
  '/faq/$id': typeof FaqIdRoute
  '/lecciones/$lessonId': typeof LeccionesLessonIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/lecciones': typeof LeccionesRouteWithChildren
  '/faq/$id': typeof FaqIdRoute
  '/lecciones/$lessonId': typeof LeccionesLessonIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/lecciones' | '/faq/$id' | '/lecciones/$lessonId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/lecciones' | '/faq/$id' | '/lecciones/$lessonId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/lecciones'
    | '/faq/$id'
    | '/lecciones/$lessonId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  LeccionesRoute: typeof LeccionesRouteWithChildren
  FaqIdRoute: typeof FaqIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LeccionesRoute: LeccionesRouteWithChildren,
  FaqIdRoute: FaqIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/lecciones",
        "/faq/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/lecciones": {
      "filePath": "lecciones.tsx",
      "children": [
        "/lecciones/$lessonId"
      ]
    },
    "/faq/$id": {
      "filePath": "faq.$id.tsx"
    },
    "/lecciones/$lessonId": {
      "filePath": "lecciones.$lessonId.tsx",
      "parent": "/lecciones"
    }
  }
}
ROUTE_MANIFEST_END */
